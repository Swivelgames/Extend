var Extend=function(ChildClass,ParentClass){var execSuper=false;if(!!~["boolean","string"].indexOf(typeof arguments[arguments.length-1]))execParent=Array.prototype.pop.apply(arguments);if(arguments<1)throw new TypeError("Must supply parent class to extend");while(arguments.length>2){var lastElem=arguments.length-2,superParent=Array.prototype.pop.apply(arguments),curParent=arguments[lastElem],newParent=Extend(curParent,superParent,execSuper);arguments[lastElem]=newParent;if(lastElem==2)ParentClass=
newParent}var MergedClass=function(){if(MergedClass.prototype.execParent===true||MergedClass.prototype.execParent==="before")MergedClass.prototype.parentClass.apply(this,arguments);MergedClass.prototype.thisClass.apply(this,arguments);if(MergedClass.prototype.execParent==="after")MergedClass.prototype.parentClass.apply(this,arguments)};Extend.mergeObjects(MergedClass,ChildClass,ParentClass);MergedClass.prototype=Extend.mergePrototypes(Extend.getPrototype(ChildClass),Extend.getPrototype(ParentClass));
MergedClass.prototype.execParent=execParent;if(!!ParentClass.prototype.originClass)MergedClass.prototype.originClass=ParentClass.prototype.originClass;else MergedClass.prototype.originClass=ParentClass;MergedClass.prototype.parentClass=ParentClass;MergedClass.prototype.thisClass=ChildClass;MergedClass.prototype.thisConstructor=MergedClass;return MergedClass};Extend.mergeObjects=function(host,obj,obj2,obj3,obj4){return jQuery.extend.apply(host,[true,host,obj2,obj])};
Extend.defineProperties=function(obj,descriptorArr){var objProps=Object.getOwnPropertyNames(obj);for(var x in descriptorArr){if(!descriptorArr.hasOwnProperty(x))continue;if(objProps.indexOf(x)>-1){var propDesc=Object.getOwnPropertyDescriptor(obj,x);if(!propDesc.configurable)continue;if(Extend.isObjectLiteral(propDesc.value)&&Extend.isObjectLiteral(descriptorArr[x].value))descriptorArr[x].value=Extend.mergeObjects({},descriptorArr[x].value,propDesc.value)}Object.defineProperty(obj,x,descriptorArr[x])}return obj};
Extend.getObjProperties=function(obj){if(!obj||!(obj instanceof Object))return[];var props=Object.getOwnPropertyNames(obj),properties={};for(var i in props){var propName=props[i];if(!obj.hasOwnProperty(propName))continue;properties[propName]=Object.getOwnPropertyDescriptor(obj,propName)}return properties};Extend.getPrototype=function(obj){return Extend.getObjProperties(obj.prototype)};
Extend.mergePrototypes=function(child,parent){var proto={};if(typeof child!="object"||typeof parent!="object")throw new TypeError("mergePrototypes: All parameters must be objects");if(arguments.length>2&&isNaN(arguments[2]))for(var i=arguments.length;i>1;i--)arguments[i-1]=Extend.mergePrototypes(arguments[i-1],arguments[i]);Extend.setProperties(proto,parent);Extend.setProperties(proto,child);return proto};
Extend.setProperties=function(obj,props){for(var i in props){if(i=="parentClass"||i=="thisClass")continue;var prop=props[i];if(!!~Object.getOwnPropertyNames(obj).indexOf(i))if(obj[i]&&(obj[i].constructor===Object&&(prop.value&&prop.value.constructor===Object)))prop.value=Extend.mergeObjects({},prop.value,obj[i]);Object.defineProperty(obj,i,prop)}};Extend.isObjectLiteral=function(obj){return obj&&(obj.constructor&&obj.constructor===Object)};
